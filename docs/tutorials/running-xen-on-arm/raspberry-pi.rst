
****************************
Hacking Xen on Raspberry Pi4
****************************

If you intend to hack Xen on Arm&reg; and would like to use the Raspberry Pi4 (RPi4) to do it, follow these steps to get Xen up and running using U-Boot and TFTP. I like to use TFTP because it makes it extremely fast to update any binary during development. 

.. note:: This `tutorial <https://help.ubuntu.com/community/TFTP>`__ shows you how to set up and configure a TFTP server. To configure a UART connection to get early output from Xen and Linux, see this tutorial `<https://lancesimms.com/RaspberryPi/HackingRaspberryPi4WithYocto_Part1.html>`__.

1. Use the `rpi-imager` to format an SD card with the regular default Raspberry Pi OS. Mount the first SD card partition and edit `config.txt`. Make sure to add the following:

    .. code-block::

        kernel=u-boot.bin

        enable_uart=1

        arm_64bit=1

2. Download a suitable U-Boot binary for RPi4 (`u-boot.bin`) from any distro, for instance OpenSUSE. Download the JeOS image, then open it and save `u-boot.bin`:

    .. code-block::

            xz -d 
        openSUSE-Tumbleweed-ARM-JeOS-raspberrypi4.aarch64.raw.xz

            kpartx -a 
        ./openSUSE-Tumbleweed-ARM-JeOS-raspberrypi4.aarch64.raw

        mount /dev/mapper/loop0p1 /mnt
        cp /mnt/u-boot.bin /tmp

3. Place the `u-boot.bin` in the first SD card partition together with `config.txt`. Next time the system boots, you will get a U-Boot prompt that allows you to load Xen, the Linux kernel for Dom0, the Dom0 rootfs, and the device tree from a TFTP server over the network. I automated the loading steps by placing a U-Boot `boot.scr` script on the SD card:

    .. code-block::

        setenv serverip 192.168.0.1

        setenv ipaddr 192.168.0.2

        tftpb 0xC00000 boot2.scr

        source 0xC00000

    Where:

    – serverip is the IP of your TFTP server

    – ipaddr is the IP of the RPi4

4. Use `mkimage` to generate `boot.scr` and place it next to `config.txt` and `u-boot.bin`:

    .. code-block::

        mkimage -T script -A arm64 -C none -a 0x2400000 -e 0x2400000 -d boot.source boot.scr

    Where:

    – `boot.source` is the input

    – `boot.scr` is the output

    U-Boot will automatically execute the provided `boot.sc`r`, which sets up the network and fetches a second script (`boot2.scr`) from the TFTP server. `boot2.scr` should come with all the instructions to load Xen and the other required binaries. You can generate `b`oot2.scr` using `ImageBuilder <https://wiki.xenproject.org/wiki/ImageBuilder>`__.

.. important:: 

    Make sure to use Xen 4.14 or later. The Linux kernel should be master (or 5.9 when it is out, 5.4-rc4 works.) The Linux ARM64 default config works fine as kernel config. Any 64-bit rootfs should work for Dom0. Use the device tree that comes with upstream Linux for RPi4 (`arch/arm64/boot/dts/broadcom/bcm2711-rpi-4-b.dtb`). RPi4 has two UARTs; the default is bcm2835-aux-uart at address 0x7e215040. It is specified as “serial1” in the device tree instead of serial0. You can tell Xen to use serial1 by specifying on the Xen command line as shown below:

    .. code-block::

        console=dtuart dtuart=serial1 sync_console

The Xen command line is provided by the `boot2.scr` script generated by ImageBuilder as “xen,xen-bootargs“. After editing boot2.source you can regenerate `boot2.scr` with mkimage as shown below:

.. code-block::

    mkimage -A arm64 -T script -C none -a 0xC00000 -e 0xC00000 -d boot2.source boot2.scr